{"ast":null,"code":"import axios from \"axios\";\nimport * as actions from \"./signupActions\";\nexport const loginUser = (email, password) => {\n  return function (dispatch) {\n    dispatch(loginUserStart());\n    const data = {\n      email,\n      password,\n      returnSecureToken: true\n    };\n    axios.post(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCEmDZW6k2XJlQritKoYeJG14ExYa1rRSM\", data).then(result => {\n      // LocalStorage ruu hadgalna\n      const token = result.data.idToken;\n      const userId = result.data.localId;\n      const expiresIn = result.data.expiresIn;\n      const expireDate = new Date(new Date().getTime() + expiresIn * 1000);\n      const refreshToken = result.data.refreshToken;\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"userId\", userId);\n      localStorage.setItem(\"expireDate\", expireDate);\n      localStorage.setItem(\"refreshToken\", refreshToken);\n      dispatch(loginUserSuccess(token, userId));\n      dispatch(actions.autoLogoutAfterMillisec(expiresIn * 1000));\n    }).catch(err => {\n      dispatch(loginUserError(err));\n    });\n  };\n};\nexport const loginUserStart = () => {\n  return {\n    type: \"LOGIN_USER_START\"\n  };\n};\nexport const loginUserSuccess = (token, userId) => {\n  return {\n    type: \"LOGIN_USER_SUCCESS\",\n    token,\n    userId\n  };\n};\nexport const loginUserError = error => {\n  return {\n    type: \"LOGIN_USER_ERROR\",\n    error\n  };\n};","map":{"version":3,"sources":["/Users/tmg/Desktop/burger/src/redux/actions/loginActions.js"],"names":["axios","actions","loginUser","email","password","dispatch","loginUserStart","data","returnSecureToken","post","then","result","token","idToken","userId","localId","expiresIn","expireDate","Date","getTime","refreshToken","localStorage","setItem","loginUserSuccess","autoLogoutAfterMillisec","catch","err","loginUserError","type","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,iBAAzB;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC5C,SAAO,UAASC,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAACC,cAAc,EAAf,CAAR;AAEA,UAAMC,IAAI,GAAG;AACXJ,MAAAA,KADW;AAEXC,MAAAA,QAFW;AAGXI,MAAAA,iBAAiB,EAAE;AAHR,KAAb;AAMAR,IAAAA,KAAK,CACFS,IADH,CAEI,mHAFJ,EAGIF,IAHJ,EAKGG,IALH,CAKQC,MAAM,IAAI;AACd;AACA,YAAMC,KAAK,GAAGD,MAAM,CAACJ,IAAP,CAAYM,OAA1B;AACA,YAAMC,MAAM,GAAGH,MAAM,CAACJ,IAAP,CAAYQ,OAA3B;AACA,YAAMC,SAAS,GAAGL,MAAM,CAACJ,IAAP,CAAYS,SAA9B;AACA,YAAMC,UAAU,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuBH,SAAS,GAAG,IAA5C,CAAnB;AACA,YAAMI,YAAY,GAAGT,MAAM,CAACJ,IAAP,CAAYa,YAAjC;AAEAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BV,KAA9B;AACAS,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BR,MAA/B;AACAO,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCL,UAAnC;AACAI,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCF,YAArC;AAEAf,MAAAA,QAAQ,CAACkB,gBAAgB,CAACX,KAAD,EAAQE,MAAR,CAAjB,CAAR;AACAT,MAAAA,QAAQ,CAACJ,OAAO,CAACuB,uBAAR,CAAgCR,SAAS,GAAG,IAA5C,CAAD,CAAR;AACD,KApBH,EAqBGS,KArBH,CAqBSC,GAAG,IAAI;AACZrB,MAAAA,QAAQ,CAACsB,cAAc,CAACD,GAAD,CAAf,CAAR;AACD,KAvBH;AAwBD,GAjCD;AAkCD,CAnCM;AAqCP,OAAO,MAAMpB,cAAc,GAAG,MAAM;AAClC,SAAO;AACLsB,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAML,gBAAgB,GAAG,CAACX,KAAD,EAAQE,MAAR,KAAmB;AACjD,SAAO;AACLc,IAAAA,IAAI,EAAE,oBADD;AAELhB,IAAAA,KAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CANM;AAQP,OAAO,MAAMa,cAAc,GAAGE,KAAK,IAAI;AACrC,SAAO;AACLD,IAAAA,IAAI,EAAE,kBADD;AAELC,IAAAA;AAFK,GAAP;AAID,CALM","sourcesContent":["import axios from \"axios\";\r\nimport * as actions from \"./signupActions\";\r\n\r\nexport const loginUser = (email, password) => {\r\n  return function(dispatch) {\r\n    dispatch(loginUserStart());\r\n\r\n    const data = {\r\n      email,\r\n      password,\r\n      returnSecureToken: true\r\n    };\r\n\r\n    axios\r\n      .post(\r\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCEmDZW6k2XJlQritKoYeJG14ExYa1rRSM\",\r\n        data\r\n      )\r\n      .then(result => {\r\n        // LocalStorage ruu hadgalna\r\n        const token = result.data.idToken;\r\n        const userId = result.data.localId;\r\n        const expiresIn = result.data.expiresIn;\r\n        const expireDate = new Date(new Date().getTime() + expiresIn * 1000);\r\n        const refreshToken = result.data.refreshToken;\r\n\r\n        localStorage.setItem(\"token\", token);\r\n        localStorage.setItem(\"userId\", userId);\r\n        localStorage.setItem(\"expireDate\", expireDate);\r\n        localStorage.setItem(\"refreshToken\", refreshToken);\r\n\r\n        dispatch(loginUserSuccess(token, userId));\r\n        dispatch(actions.autoLogoutAfterMillisec(expiresIn * 1000));\r\n      })\r\n      .catch(err => {\r\n        dispatch(loginUserError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const loginUserStart = () => {\r\n  return {\r\n    type: \"LOGIN_USER_START\"\r\n  };\r\n};\r\n\r\nexport const loginUserSuccess = (token, userId) => {\r\n  return {\r\n    type: \"LOGIN_USER_SUCCESS\",\r\n    token,\r\n    userId\r\n  };\r\n};\r\n\r\nexport const loginUserError = error => {\r\n  return {\r\n    type: \"LOGIN_USER_ERROR\",\r\n    error\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}